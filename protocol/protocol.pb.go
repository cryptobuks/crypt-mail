// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HandShakeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandShakeRequest) Reset()         { *m = HandShakeRequest{} }
func (m *HandShakeRequest) String() string { return proto.CompactTextString(m) }
func (*HandShakeRequest) ProtoMessage()    {}
func (*HandShakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

func (m *HandShakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandShakeRequest.Unmarshal(m, b)
}
func (m *HandShakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandShakeRequest.Marshal(b, m, deterministic)
}
func (m *HandShakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandShakeRequest.Merge(m, src)
}
func (m *HandShakeRequest) XXX_Size() int {
	return xxx_messageInfo_HandShakeRequest.Size(m)
}
func (m *HandShakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandShakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandShakeRequest proto.InternalMessageInfo

type HandShakeResponse struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SPubKey              string   `protobuf:"bytes,2,opt,name=s_pub_key,json=sPubKey,proto3" json:"s_pub_key,omitempty"`
	SPrivKey             string   `protobuf:"bytes,3,opt,name=s_priv_key,json=sPrivKey,proto3" json:"s_priv_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandShakeResponse) Reset()         { *m = HandShakeResponse{} }
func (m *HandShakeResponse) String() string { return proto.CompactTextString(m) }
func (*HandShakeResponse) ProtoMessage()    {}
func (*HandShakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}

func (m *HandShakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandShakeResponse.Unmarshal(m, b)
}
func (m *HandShakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandShakeResponse.Marshal(b, m, deterministic)
}
func (m *HandShakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandShakeResponse.Merge(m, src)
}
func (m *HandShakeResponse) XXX_Size() int {
	return xxx_messageInfo_HandShakeResponse.Size(m)
}
func (m *HandShakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandShakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandShakeResponse proto.InternalMessageInfo

func (m *HandShakeResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *HandShakeResponse) GetSPubKey() string {
	if m != nil {
		return m.SPubKey
	}
	return ""
}

func (m *HandShakeResponse) GetSPrivKey() string {
	if m != nil {
		return m.SPrivKey
	}
	return ""
}

type QueryRequest struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{2}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *QueryRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type QueryResponse struct {
	SessionId            uint64     `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Accounts             []*Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{3}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *QueryResponse) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type LockRequest struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockRequest) Reset()         { *m = LockRequest{} }
func (m *LockRequest) String() string { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()    {}
func (*LockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{4}
}

func (m *LockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockRequest.Unmarshal(m, b)
}
func (m *LockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockRequest.Marshal(b, m, deterministic)
}
func (m *LockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockRequest.Merge(m, src)
}
func (m *LockRequest) XXX_Size() int {
	return xxx_messageInfo_LockRequest.Size(m)
}
func (m *LockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockRequest proto.InternalMessageInfo

func (m *LockRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *LockRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type LockResponse struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockResponse) Reset()         { *m = LockResponse{} }
func (m *LockResponse) String() string { return proto.CompactTextString(m) }
func (*LockResponse) ProtoMessage()    {}
func (*LockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{5}
}

func (m *LockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockResponse.Unmarshal(m, b)
}
func (m *LockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockResponse.Marshal(b, m, deterministic)
}
func (m *LockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockResponse.Merge(m, src)
}
func (m *LockResponse) XXX_Size() int {
	return xxx_messageInfo_LockResponse.Size(m)
}
func (m *LockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockResponse proto.InternalMessageInfo

func (m *LockResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type UnlockRequest struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Passphrase           string   `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockRequest) Reset()         { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()    {}
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{6}
}

func (m *UnlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockRequest.Unmarshal(m, b)
}
func (m *UnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockRequest.Marshal(b, m, deterministic)
}
func (m *UnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockRequest.Merge(m, src)
}
func (m *UnlockRequest) XXX_Size() int {
	return xxx_messageInfo_UnlockRequest.Size(m)
}
func (m *UnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockRequest proto.InternalMessageInfo

func (m *UnlockRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *UnlockRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *UnlockRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type UnlockResponse struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockResponse) Reset()         { *m = UnlockResponse{} }
func (m *UnlockResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockResponse) ProtoMessage()    {}
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{7}
}

func (m *UnlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockResponse.Unmarshal(m, b)
}
func (m *UnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockResponse.Marshal(b, m, deterministic)
}
func (m *UnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockResponse.Merge(m, src)
}
func (m *UnlockResponse) XXX_Size() int {
	return xxx_messageInfo_UnlockResponse.Size(m)
}
func (m *UnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockResponse proto.InternalMessageInfo

func (m *UnlockResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// password need be encrypted by s_priv_key
type CreateRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// in cryptmail all people identified by pub-key and the alias only decided in the server's name
	// just a alias of one pub key in local server
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Force                bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Passphrase           string   `protobuf:"bytes,4,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{8}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CreateRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *CreateRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *CreateRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type CreateResponse struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{9}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type ImportRequest struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Force                bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	PubKey               string   `protobuf:"bytes,4,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	PrivKey              string   `protobuf:"bytes,5,opt,name=priv_key,json=privKey,proto3" json:"priv_key,omitempty"`
	Passphrase           string   `protobuf:"bytes,6,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportRequest) Reset()         { *m = ImportRequest{} }
func (m *ImportRequest) String() string { return proto.CompactTextString(m) }
func (*ImportRequest) ProtoMessage()    {}
func (*ImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{10}
}

func (m *ImportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportRequest.Unmarshal(m, b)
}
func (m *ImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportRequest.Marshal(b, m, deterministic)
}
func (m *ImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportRequest.Merge(m, src)
}
func (m *ImportRequest) XXX_Size() int {
	return xxx_messageInfo_ImportRequest.Size(m)
}
func (m *ImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportRequest proto.InternalMessageInfo

func (m *ImportRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ImportRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *ImportRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ImportRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *ImportRequest) GetPrivKey() string {
	if m != nil {
		return m.PrivKey
	}
	return ""
}

func (m *ImportRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type ImportResponse struct {
	SessionId            uint64   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportResponse) Reset()         { *m = ImportResponse{} }
func (m *ImportResponse) String() string { return proto.CompactTextString(m) }
func (*ImportResponse) ProtoMessage()    {}
func (*ImportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{11}
}

func (m *ImportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportResponse.Unmarshal(m, b)
}
func (m *ImportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportResponse.Marshal(b, m, deterministic)
}
func (m *ImportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportResponse.Merge(m, src)
}
func (m *ImportResponse) XXX_Size() int {
	return xxx_messageInfo_ImportResponse.Size(m)
}
func (m *ImportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportResponse proto.InternalMessageInfo

func (m *ImportResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func init() {
	proto.RegisterType((*HandShakeRequest)(nil), "protocol.HandShakeRequest")
	proto.RegisterType((*HandShakeResponse)(nil), "protocol.HandShakeResponse")
	proto.RegisterType((*QueryRequest)(nil), "protocol.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "protocol.QueryResponse")
	proto.RegisterType((*LockRequest)(nil), "protocol.LockRequest")
	proto.RegisterType((*LockResponse)(nil), "protocol.LockResponse")
	proto.RegisterType((*UnlockRequest)(nil), "protocol.UnlockRequest")
	proto.RegisterType((*UnlockResponse)(nil), "protocol.UnlockResponse")
	proto.RegisterType((*CreateRequest)(nil), "protocol.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "protocol.CreateResponse")
	proto.RegisterType((*ImportRequest)(nil), "protocol.ImportRequest")
	proto.RegisterType((*ImportResponse)(nil), "protocol.ImportResponse")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcf, 0x6f, 0x9b, 0x30,
	0x14, 0x16, 0x6d, 0xa0, 0xf0, 0x5a, 0xaa, 0xd5, 0xea, 0xda, 0x8c, 0xfd, 0x50, 0xc5, 0x29, 0x97,
	0x76, 0x52, 0xa7, 0x49, 0x93, 0x7a, 0xea, 0xb2, 0xc3, 0xa2, 0xec, 0x90, 0x31, 0xed, 0x38, 0x21,
	0x07, 0x3c, 0x05, 0x85, 0x61, 0xcf, 0x86, 0x48, 0xec, 0x8f, 0xda, 0x7f, 0xb7, 0xfb, 0x14, 0x6c,
	0xc0, 0x90, 0x48, 0x43, 0x8a, 0x76, 0xc3, 0xef, 0xf3, 0xf7, 0xbe, 0xcf, 0x8f, 0xef, 0xc1, 0x39,
	0xe3, 0x34, 0xa7, 0x11, 0x4d, 0xef, 0xaa, 0x0f, 0x64, 0xd7, 0x67, 0xcf, 0xc5, 0x51, 0x44, 0x8b,
	0x2c, 0x97, 0x80, 0x8f, 0xe0, 0xc9, 0x47, 0x9c, 0xc5, 0x5f, 0x56, 0x78, 0x4d, 0x02, 0xf2, 0xb3,
	0x20, 0x22, 0xf7, 0x53, 0xb8, 0xd0, 0x6a, 0x82, 0xd1, 0x4c, 0x10, 0xf4, 0x12, 0x40, 0x10, 0x21,
	0x12, 0x9a, 0x85, 0x49, 0x3c, 0x36, 0x6e, 0x8c, 0xc9, 0x28, 0x70, 0x54, 0x65, 0x16, 0x23, 0x0f,
	0x1c, 0x11, 0xb2, 0x62, 0x19, 0xae, 0x49, 0x39, 0x3e, 0xba, 0x31, 0x26, 0x4e, 0x70, 0x22, 0x16,
	0xc5, 0x72, 0x4e, 0x4a, 0xf4, 0x02, 0x40, 0x84, 0x8c, 0x27, 0x9b, 0x0a, 0x3c, 0xae, 0x40, 0x5b,
	0x2c, 0x78, 0xb2, 0x99, 0x93, 0xd2, 0x9f, 0xc2, 0xd9, 0xe7, 0x82, 0xf0, 0x52, 0xa9, 0xff, 0x4b,
	0xe8, 0x12, 0x4c, 0x9c, 0x26, 0x58, 0x28, 0x11, 0x79, 0xf0, 0xbf, 0x81, 0xab, 0x9a, 0x0c, 0xb3,
	0x7b, 0x0b, 0xb6, 0x9a, 0xc3, 0xb6, 0xd1, 0xf1, 0xe4, 0xf4, 0xfe, 0xe2, 0xae, 0x19, 0xd9, 0xa3,
	0x44, 0x82, 0xe6, 0x8a, 0xff, 0x1e, 0x4e, 0x3f, 0xd1, 0x68, 0x7d, 0x90, 0xc5, 0x5b, 0x38, 0x93,
	0x3d, 0x06, 0x39, 0xf4, 0x63, 0x70, 0xbf, 0x66, 0xe9, 0x81, 0xa2, 0xe8, 0x15, 0x00, 0xc3, 0x42,
	0xb0, 0x15, 0xc7, 0x82, 0xa8, 0xd1, 0x6b, 0x15, 0xff, 0x35, 0x9c, 0xd7, 0x2a, 0xc3, 0x6c, 0xfd,
	0x02, 0x77, 0xca, 0x09, 0xce, 0xc9, 0x41, 0xb6, 0x2e, 0xc1, 0xfc, 0x4e, 0x79, 0x24, 0x1d, 0xd9,
	0x81, 0x3c, 0xf4, 0xcc, 0x8e, 0xf6, 0x99, 0xad, 0xb5, 0x87, 0x99, 0xfd, 0x6d, 0x80, 0x3b, 0xfb,
	0xc1, 0x28, 0xcf, 0xff, 0x83, 0xdb, 0x6b, 0x38, 0xa9, 0xf3, 0x2e, 0xad, 0x5a, 0x4c, 0xc6, 0xfd,
	0x19, 0xd8, 0x4d, 0xd8, 0x4d, 0xb9, 0x09, 0x4c, 0x66, 0xbd, 0xf7, 0x42, 0x6b, 0xdf, 0x0b, 0x6b,
	0xbf, 0x83, 0x5e, 0x78, 0xff, 0xe7, 0x08, 0xcc, 0xc7, 0x34, 0x89, 0x08, 0xfa, 0x00, 0x4e, 0xb3,
	0xb4, 0xc8, 0x6b, 0xc3, 0xdc, 0xdf, 0x6e, 0xef, 0xf9, 0x5e, 0x4c, 0xc9, 0xbd, 0x03, 0xb3, 0xda,
	0x23, 0x74, 0xd5, 0xde, 0xd2, 0xb7, 0xd3, 0xbb, 0xde, 0xa9, 0x2b, 0xe6, 0x5b, 0x18, 0x6d, 0xe3,
	0x8d, 0x9e, 0xb6, 0x17, 0xb4, 0x95, 0xf1, 0xae, 0xfa, 0x65, 0x45, 0x7b, 0x00, 0x4b, 0x06, 0x10,
	0x69, 0x9d, 0x3b, 0xc1, 0xf7, 0xc6, 0xbb, 0x40, 0x4b, 0x96, 0x81, 0xd0, 0xc9, 0x9d, 0x78, 0xea,
	0xe4, 0x5e, 0x76, 0x1e, 0xc0, 0x92, 0xb3, 0xd6, 0xc9, 0x9d, 0xb4, 0xe8, 0xe4, 0xee, 0x6f, 0x59,
	0x5a, 0x15, 0xf0, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x9d, 0x9d, 0x6b, 0x68, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AliceClient is the client API for Alice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AliceClient interface {
	HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// maybe split the action to unlock and load would be better
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
}

type aliceClient struct {
	cc *grpc.ClientConn
}

func NewAliceClient(cc *grpc.ClientConn) AliceClient {
	return &aliceClient{cc}
}

func (c *aliceClient) HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error) {
	out := new(HandShakeResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/HandShake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/protocol.Alice/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliceServer is the server API for Alice service.
type AliceServer interface {
	HandShake(context.Context, *HandShakeRequest) (*HandShakeResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	// maybe split the action to unlock and load would be better
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
}

func RegisterAliceServer(s *grpc.Server, srv AliceServer) {
	s.RegisterService(&_Alice_serviceDesc, srv)
}

func _Alice_HandShake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandShakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).HandShake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/HandShake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).HandShake(ctx, req.(*HandShakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alice_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alice_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alice_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alice_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alice_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Alice/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Alice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Alice",
	HandlerType: (*AliceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandShake",
			Handler:    _Alice_HandShake_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Alice_Query_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Alice_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Alice_Unlock_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Alice_Create_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _Alice_Import_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
